================================================================================
                      STRIPE PAYMENT FLOW DIAGRAM
================================================================================

This document explains the complete payment flow in your application.

================================================================================
                        VISUAL FLOW DIAGRAM
================================================================================

[CUSTOMER]
    |
    | 1. Browse Products
    v
[MARKETPLACE PAGE]
    |
    | 2. Add to Cart
    v
[SHOPPING CART]
    |
    | 3. Click "Proceed to Checkout"
    v
[CHECKOUT FORM]
    |
    | 4. Fill Shipping Details:
    |    - Name
    |    - Phone
    |    - Address
    |    - City, State, Pincode
    |
    | 5. Click "Proceed to Payment"
    v
[FRONTEND] → API Call: POST /api/stripe/create-checkout-session
    |
    v
[BACKEND SERVER]
    |
    | 6. Validate Order:
    |    - Check product availability
    |    - Verify stock quantity
    |    - Calculate total amount
    |
    | 7. Create Order in Database:
    |    - Status: "pending"
    |    - Payment Status: "pending"
    |    - Store shipping details
    |
    | 8. Create Stripe Session:
    |    - Call Stripe API
    |    - Generate checkout URL
    |    - Set success/cancel URLs
    |
    | 9. Return Session URL
    v
[FRONTEND]
    |
    | 10. Redirect to Stripe
    v
[STRIPE CHECKOUT PAGE] ← Secure, PCI-compliant
    |
    | 11. Customer Enters Card Details:
    |     - Card Number
    |     - Expiry Date
    |     - CVC
    |     - Billing Info
    |
    | 12. Stripe Processes Payment
    |
    +------------------+------------------+
    |                  |                  |
    v                  v                  v
[SUCCESS]        [DECLINED]         [CANCELLED]
    |                  |                  |
    |                  |                  |
    v                  v                  v
Redirect to:    Redirect to:      Redirect to:
/payment-       /payment-         /payment-
success         cancel            cancel
    |                  |                  |
    v                  |                  |
[SUCCESS PAGE]         |                  |
    |                  |                  |
    | 13. Call API:    |                  |
    | POST /api/stripe/verify-payment    |
    |                  |                  |
    v                  v                  v
[BACKEND]         [BACKEND]         [BACKEND]
    |                  |                  |
    | 14. Verify       | Mark order       | Mark order
    | Payment with     | as failed        | as cancelled
    | Stripe           |                  |
    |                  |                  |
    | 15. Update       |                  |
    | Order:           |                  |
    | - Status:        |                  |
    |   "confirmed"    |                  |
    | - Payment:       |                  |
    |   "completed"    |                  |
    |                  |                  |
    | 16. Update       |                  |
    | Product          |                  |
    | Quantities       |                  |
    | (decrease)       |                  |
    |                  |                  |
    v                  v                  v
[DATABASE]        [DATABASE]        [DATABASE]
Order Saved       Order Failed      Order Cancelled
    |                  |                  |
    v                  v                  v
[CUSTOMER]        [CUSTOMER]        [CUSTOMER]
Sees Success      Sees Error        Can Retry
Message           Message           Payment

================================================================================
                        DETAILED STEP-BY-STEP FLOW
================================================================================

PHASE 1: ORDER INITIATION
--------------------------
Step 1: Customer browses products on marketplace
Step 2: Customer adds products to cart
Step 3: Customer clicks "Proceed to Checkout"
Step 4: Customer fills shipping details form
Step 5: Customer clicks "Proceed to Payment"

PHASE 2: CHECKOUT SESSION CREATION
-----------------------------------
Step 6: Frontend sends POST request to:
        /api/stripe/create-checkout-session
        
        Request Body:
        {
          items: [{
            productId: "...",
            quantity: 2,
            price: 100
          }],
          shippingAddress: {
            name: "John Doe",
            phone: "1234567890",
            address: "123 Main St",
            city: "City",
            state: "State",
            pincode: "12345"
          }
        }

Step 7: Backend validates:
        - User is authenticated (JWT token)
        - Products exist in database
        - Sufficient stock available
        - Product status is "available"

Step 8: Backend creates order in MongoDB:
        {
          customerId: "user_id",
          farmerId: "farmer_id",
          products: [...],
          total: 200,
          status: "pending",
          paymentInfo: {
            method: "stripe",
            paymentStatus: "pending"
          },
          shippingAddress: {...}
        }

Step 9: Backend calls Stripe API:
        stripe.checkout.sessions.create({
          payment_method_types: ['card'],
          line_items: [...],
          mode: 'payment',
          success_url: 'http://localhost:5173/payment-success?...',
          cancel_url: 'http://localhost:5173/payment-cancel?...',
          metadata: {
            orderId: "...",
            customerId: "..."
          }
        })

Step 10: Backend returns to frontend:
         {
           ok: true,
           sessionId: "cs_test_...",
           sessionUrl: "https://checkout.stripe.com/...",
           orderId: "..."
         }

PHASE 3: STRIPE PAYMENT PROCESSING
-----------------------------------
Step 11: Frontend redirects user to sessionUrl
         (Stripe's hosted checkout page)

Step 12: Customer sees Stripe checkout page with:
         - Product details
         - Total amount
         - Card input fields
         - Billing information

Step 13: Customer enters card details:
         - Card number (e.g., 4242 4242 4242 4242)
         - Expiry date (e.g., 12/34)
         - CVC (e.g., 123)
         - Cardholder name

Step 14: Stripe validates card and processes payment:
         - Card number validation
         - Fraud detection
         - 3D Secure authentication (if required)
         - Payment authorization
         - Payment capture

PHASE 4A: SUCCESSFUL PAYMENT
-----------------------------
Step 15: Stripe redirects to success_url:
         http://localhost:5173/payment-success?
         session_id=cs_test_...&order_id=...

Step 16: PaymentSuccess page loads

Step 17: Frontend calls verification API:
         POST /api/stripe/verify-payment
         {
           sessionId: "cs_test_...",
           orderId: "..."
         }

Step 18: Backend verifies with Stripe:
         - Retrieves session from Stripe
         - Checks payment_status === 'paid'
         - Finds order in database

Step 19: Backend updates order:
         {
           status: "confirmed",
           paymentInfo: {
             paymentStatus: "completed",
             stripePaymentId: "pi_..."
           }
         }

Step 20: Backend updates product quantities:
         - Decreases stock by ordered quantity
         - Saves to database

Step 21: Backend returns success response:
         {
           ok: true,
           message: "Payment verified successfully",
           order: {...}
         }

Step 22: Frontend displays success page:
         - Green checkmark icon
         - Order details
         - Shipping information
         - "View My Orders" button

PHASE 4B: FAILED/CANCELLED PAYMENT
-----------------------------------
Step 15: Stripe redirects to cancel_url:
         http://localhost:5173/payment-cancel?
         order_id=...

Step 16: PaymentCancel page loads

Step 17: Frontend calls cancellation API:
         POST /api/stripe/cancel-payment
         {
           orderId: "..."
         }

Step 18: Backend updates order:
         {
           status: "cancelled",
           paymentInfo: {
             paymentStatus: "cancelled"
           }
         }

Step 19: Frontend displays cancel page:
         - Red X icon
         - Cancellation message
         - Options to retry or go home

================================================================================
                        DATABASE STATE CHANGES
================================================================================

INITIAL STATE (After Checkout Session Creation):
-------------------------------------------------
Order Document:
{
  _id: "order_123",
  customerId: "user_456",
  farmerId: "farmer_789",
  products: [
    {
      productId: "prod_001",
      quantity: 2,
      price: 100
    }
  ],
  total: 200,
  status: "pending",              ← Initial status
  paymentInfo: {
    method: "stripe",
    paymentStatus: "pending",     ← Initial payment status
    stripeSessionId: "cs_test_..."
  },
  shippingAddress: {...},
  createdAt: "2024-01-01T00:00:00Z"
}

Product Document:
{
  _id: "prod_001",
  title: "Fresh Tomatoes",
  quantity: 50,                   ← Before purchase
  price: 100,
  status: "available"
}

FINAL STATE (After Successful Payment):
----------------------------------------
Order Document:
{
  _id: "order_123",
  customerId: "user_456",
  farmerId: "farmer_789",
  products: [
    {
      productId: "prod_001",
      quantity: 2,
      price: 100
    }
  ],
  total: 200,
  status: "confirmed",            ← Updated
  paymentInfo: {
    method: "stripe",
    paymentStatus: "completed",   ← Updated
    stripeSessionId: "cs_test_...",
    stripePaymentId: "pi_..."     ← Added
  },
  shippingAddress: {...},
  createdAt: "2024-01-01T00:00:00Z",
  updatedAt: "2024-01-01T00:05:00Z"
}

Product Document:
{
  _id: "prod_001",
  title: "Fresh Tomatoes",
  quantity: 48,                   ← Decreased by 2
  price: 100,
  status: "available"
}

================================================================================
                        API COMMUNICATION FLOW
================================================================================

1. CREATE CHECKOUT SESSION
   Request:  POST /api/stripe/create-checkout-session
   Headers:  Authorization: Bearer <JWT_TOKEN>
   Body:     { items: [...], shippingAddress: {...} }
   Response: { ok: true, sessionUrl: "...", orderId: "..." }

2. STRIPE PAYMENT PROCESSING
   (Happens on Stripe's servers - no API call from your app)

3. VERIFY PAYMENT
   Request:  POST /api/stripe/verify-payment
   Headers:  Authorization: Bearer <JWT_TOKEN>
   Body:     { sessionId: "...", orderId: "..." }
   Response: { ok: true, message: "...", order: {...} }

4. CANCEL PAYMENT (if needed)
   Request:  POST /api/stripe/cancel-payment
   Headers:  Authorization: Bearer <JWT_TOKEN>
   Body:     { orderId: "..." }
   Response: { ok: true, message: "...", order: {...} }

================================================================================
                        SECURITY MEASURES
================================================================================

✓ JWT Authentication:
  - All API endpoints require valid JWT token
  - Token contains user ID and role
  - Prevents unauthorized access

✓ Server-side Validation:
  - Product availability checked
  - Stock quantity verified
  - Price validation
  - User authorization

✓ Stripe Security:
  - PCI-DSS compliant
  - Card data never touches your server
  - Encrypted communication
  - Fraud detection

✓ Payment Verification:
  - Session retrieved from Stripe
  - Payment status verified
  - Double-check before order confirmation

✓ Database Security:
  - Sensitive keys in environment variables
  - No card data stored
  - Order status tracking

================================================================================
                        ERROR HANDLING
================================================================================

FRONTEND ERRORS:
- Network failures → Show error message
- Invalid form data → Validation messages
- Authentication issues → Redirect to login

BACKEND ERRORS:
- Product not found → 404 error
- Insufficient stock → 400 error
- Payment creation failed → 500 error
- Verification failed → 400 error

STRIPE ERRORS:
- Card declined → Redirect to cancel page
- Payment failed → Show error on Stripe page
- Session expired → Redirect to cancel page

================================================================================
                        TESTING FLOW
================================================================================

1. Start servers (backend + frontend)
2. Login as customer
3. Add product to cart
4. Proceed to checkout
5. Fill shipping details
6. Click "Proceed to Payment"
7. Enter test card: 4242 4242 4242 4242
8. Complete payment
9. Verify success page appears
10. Check order in database
11. Verify product quantity decreased
12. Check Stripe dashboard for payment

================================================================================
                        PRODUCTION CONSIDERATIONS
================================================================================

✓ Use LIVE Stripe keys
✓ Enable webhooks for reliability
✓ Implement proper error logging
✓ Add email notifications
✓ Setup monitoring and alerts
✓ Test with real cards (small amounts)
✓ Have refund process ready
✓ Implement order management
✓ Add customer support system
✓ Regular security audits

================================================================================
                        END OF FLOW DIAGRAM
================================================================================
